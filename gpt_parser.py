"""
üî• VETRA AI BOT - ULTRA FIXED VERSION
–ü–û–õ–ù–û–ï –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ OAUTH2 CALLBACK

–ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚úÖ –ò–º–ø–æ—Ä—Ç ultra_fixed_auth –≤–º–µ—Å—Ç–æ fixed_auth
‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
‚úÖ Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
"""

from datetime import datetime, timedelta
import pytz
import logging
import asyncio
import re
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler

# –ö–†–ò–¢–ò–ß–ù–û: –ò–º–ø–æ—Ä—Ç —É–ª—å—Ç—Ä–∞-–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π OAuth —Å–∏—Å—Ç–µ–º—ã
try:
    from ultra_fixed_auth import ultra_fixed_auth_manager, get_user_calendar_service
    AUTH_MODULE = "ultra_fixed_auth"
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ Ultra Fixed Auth module imported successfully")
except ImportError as e:
    logger.error(f"‚ùå Failed to import ultra_fixed_auth: {e}")
    try:
        from fixed_auth import fixed_auth_manager as ultra_fixed_auth_manager, get_user_calendar_service
        AUTH_MODULE = "fixed_auth_fallback"
    except ImportError:
        print("‚ùå No authentication module found!")
        ultra_fixed_auth_manager = None
        AUTH_MODULE = "none"

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç —Å fallback
try:
    from datetime_utils import validate_datetime, format_datetime_for_display
except ImportError:
    def validate_datetime(dt, timezone):
        return dt
    def format_datetime_for_display(dt):
        return dt.strftime('%Y-%m-%d %H:%M')

try:
    from timezone_utils import get_user_timezone_from_calendar, validate_timezone, get_timezone_info
except ImportError:
    def get_user_timezone_from_calendar(service, user_id):
        return 'Asia/Almaty'
    def validate_timezone(tz):
        return tz
    def get_timezone_info(tz):
        return {'current_time': '12:00', 'current_date': '2025-06-09', 'utc_offset': '+0600', 'dst_active': False}

from config import TELEGRAM_TOKEN, OPENAI_API_KEY

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize parser
parser = None
parser_type = "unknown"

logger.info("üî• Initializing Vetra AI with ULTRA FIXED OAuth2...")

# Try to initialize parser
try:
    from gpt_parser import initialize_gpt_parser
    parser = initialize_gpt_parser(OPENAI_API_KEY)
    parser_type = "GPT Fine-tuned"
    logger.info("üéØ GPT fine-tuned parser initialized!")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è GPT fine-tuned parser failed: {e}")
    
    try:
        from text_parser import extract_multiple_events
        
        class RuleBasedWrapper:
            def extract_multiple_events(self, text, user_timezone='Asia/Almaty'):
                return extract_multiple_events(text, user_timezone)
        
        parser = RuleBasedWrapper()
        parser_type = "Rule-based"
        logger.info("‚úÖ Rule-based parser initialized as fallback")
    except Exception as e:
        logger.error(f"‚ùå All parsers failed: {e}")
        parser = None
        parser_type = "None"

# Configuration
DEFAULT_TIMEZONE = 'Asia/Almaty'

# Access control
BETA_USERS = {
    785966064,  # @Iskakov_Damir
}

ADMIN_USERS = {
    785966064,  # @Iskakov_Damir
}

# User state tracking
user_timezones = {}
authorization_checks = {}

def get_user_timezone(user_id: int, calendar_service=None) -> str:
    """Get user's timezone with caching"""
    if user_id in user_timezones:
        return user_timezones[user_id]
    
    if calendar_service:
        try:
            timezone = get_user_timezone_from_calendar(calendar_service, user_id)
            user_timezones[user_id] = timezone
            logger.info(f"‚úÖ Cached timezone for user {user_id}: {timezone}")
            return timezone
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not get timezone from calendar for user {user_id}: {e}")
    
    user_timezones[user_id] = DEFAULT_TIMEZONE
    return DEFAULT_TIMEZONE

async def check_user_access(update: Update) -> bool:
    """Check user access to bot"""
    user_id = update.effective_user.id
    
    if user_id in ADMIN_USERS or user_id in BETA_USERS:
        return True
    
    await update.message.reply_text(
        "üîí **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω / Access Restricted**\n\n"
        "üá∑üá∫ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ Vetra AI –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–∫—Ä—ã—Ç–æ–º –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.\n\n"
        "üá¨üáß Sorry, but Vetra AI is in closed beta testing.\n"
        "To get access, contact the developer.\n\n"
        "üîó **Contact:** @Iskakov_Damir",
        parse_mode='Markdown'
    )
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """START command with ultra fixed OAuth2"""
    user = update.effective_user
    user_id = user.id
    
    if not await check_user_access(update):
        return
    
    # Check if auth manager is available
    if not ultra_fixed_auth_manager:
        await update.message.reply_text(
            "‚ùå **–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ / Authorization system unavailable**\n\n"
            "üá∑üá∫ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
            "üá¨üáß Contact developer for setup.\n\n"
            "üîó **Contact:** @Iskakov_Damir"
        )
        return
    
    # Check authorization status
    auth_status = ultra_fixed_auth_manager.is_user_authorized(user_id)
    logger.info(f"üë§ User {user_id} ({user.first_name}) started bot. Authorized: {auth_status}")
    
    if not auth_status:
        await send_start_with_auth_guide(update, context)
        return
    
    # User is authorized - show success message
    calendar_service = get_user_calendar_service(user_id)
    user_timezone = get_user_timezone(user_id, calendar_service)
    user_info = ultra_fixed_auth_manager.get_user_info(user_id)
    
    # Build user info display
    calendar_info = ""
    if user_info and user_info.get('primary_calendar'):
        cal = user_info['primary_calendar']
        calendar_info = f"\nüìÖ **Connected:** {cal['summary']} ({user_timezone})"
    
    welcome_text = f"""
üëã **–ü—Ä–∏–≤–µ—Ç, {user.first_name}! / Hello, {user.first_name}!**

‚úÖ **–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! / You are authorized!**{calendar_info}

üî• **OAuth2:** ULTRA FIXED! No more callback errors!
ü§ñ **–°–∏—Å—Ç–µ–º–∞ / System:** {parser_type}
üîß **Auth Module:** {AUTH_MODULE}

üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å / How to use:**

üá∑üá∫ **–ü—Ä–∏–º–µ—Ä—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º:**
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
‚Ä¢ "–æ–±–µ–¥ –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 13:30"
‚Ä¢ "—Ä–∞–±–æ—Ç–∞ —Å 9:00 –¥–æ 17:00, —É–∂–∏–Ω –≤ 19:00"

üá¨üáß **Examples in English:**
‚Ä¢ "meeting tomorrow at 2pm"
‚Ä¢ "lunch Friday at 1:30pm"
‚Ä¢ "work from 9am to 5pm, dinner at 7pm"

‚ùì /help - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ / Full help
üîß /auth - –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / Re-authorization
üåç /timezone - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ / Timezone info
üîç /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã / System status

üöÄ **–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è! OAuth2 –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! / Ready to create events! OAuth2 fully fixed!**
"""
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def send_start_with_auth_guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send start message with ultra fixed authorization guide"""
    user = update.effective_user
    user_id = user.id
    
    logger.info(f"üîê Showing ULTRA FIXED auth guide for user {user_id}")
    
    # Create authorization URL
    auth_url = None
    if ultra_fixed_auth_manager:
        try:
            auth_url = ultra_fixed_auth_manager.create_authorization_url(user_id)
        except Exception as e:
            logger.error(f"‚ùå Auth URL creation failed: {e}")
    
    if auth_url:
        keyboard = [
            [InlineKeyboardButton("üî• ULTRA FIXED - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è / Authorize with Google", url=auth_url)],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å / Help", callback_data="auth_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        auth_text = f"""
üëã **–ü—Ä–∏–≤–µ—Ç, {user.first_name}! / Hello, {user.first_name}!**

üî• **ULTRA FIXED OAuth2 - –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –æ—à–∏–±–æ–∫! / No more errors!**

üá∑üá∫ **–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ Google Calendar:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "ULTRA FIXED - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è" –Ω–∏–∂–µ
2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π Google –∞–∫–∫–∞—É–Ω—Ç
3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—Ö–∞ (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!)
5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üá¨üáß **To work with calendar, Google Calendar access is needed:**
1. Click "ULTRA FIXED - Authorize" button below
2. Sign in to your Google account  
3. Grant calendar access
4. Wait for success page (now it works!)
5. Return here - authorization will complete automatically

üî• **–ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û / WHAT'S FIXED:**
‚úÖ Thread-safe callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ / Thread-safe callback handling
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è / Proper state synchronization  
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ / Extended port range
‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ / Enhanced error handling
‚úÖ Queue-based –º–µ–∂–ø–æ—Ç–æ–∫–æ–≤–∞—è —Å–≤—è–∑—å / Queue-based inter-thread communication

üåç **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å / Timezone will be auto-detected**
"""
        
        await update.message.reply_text(auth_text, parse_mode='Markdown', reply_markup=reply_markup)
        
        # Start monitoring for authorization completion
        authorization_checks[user_id] = {
            'timestamp': datetime.now(),
            'context': context
        }
        
        asyncio.create_task(monitor_authorization_completion_ultra_fixed(user_id, context))
    else:
        # Fallback without auth button
        await update.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / Authorization link creation error**\n\n"
            "üá∑üá∫ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.\n"
            "üá¨üáß Try /auth command to retry.\n\n"
            "üîó **Contact:** @Iskakov_Damir",
            parse_mode='Markdown'
        )

async def monitor_authorization_completion_ultra_fixed(user_id, context):
    """ULTRA FIXED authorization monitoring with improved checking"""
    max_wait_time = 300  # 5 minutes
    check_interval = 2   # Check every 2 seconds (more frequent)
    checks = 0
    max_checks = max_wait_time // check_interval
    
    logger.info(f"üîÑ Starting ULTRA FIXED authorization monitor for user {user_id}")
    
    for check_num in range(max_checks):
        await asyncio.sleep(check_interval)
        checks += 1
        
        # Check if monitoring was cancelled
        if user_id not in authorization_checks:
            logger.info(f"üõë Authorization monitoring cancelled for user {user_id}")
            return
        
        # CRITICAL: Check both authorization AND callback results
        if ultra_fixed_auth_manager:
            # Check if user is authorized
            if ultra_fixed_auth_manager.is_user_authorized(user_id):
                logger.info(f"‚úÖ Authorization detected for user {user_id}")
                await send_authorization_success_ultra_fixed(user_id, context)
                return
            
            # Check callback results
            callback_result = ultra_fixed_auth_manager.check_authorization_result(user_id)
            if callback_result:
                if callback_result['success']:
                    logger.info(f"‚úÖ Callback success detected for user {user_id}")
                    await send_authorization_success_ultra_fixed(user_id, context)
                    return
                else:
                    logger.error(f"‚ùå Callback error for user {user_id}: {callback_result['message']}")
                    await send_authorization_error(user_id, context, callback_result['message'])
                    return
        
        # Log progress every 30 seconds
        if checks % 15 == 0:  # Every 30 seconds (15 * 2 seconds)
            elapsed = checks * check_interval
            logger.info(f"üîÑ ULTRA FIXED auth check {checks}/{max_checks} for user {user_id} ({elapsed}s elapsed)")
    
    # Timeout reached
    logger.warning(f"‚è∞ Authorization timeout for user {user_id}")
    if user_id in authorization_checks:
        del authorization_checks[user_id]
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚è∞ **–í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ / Authorization timeout**\n\n"
                 "üî• **ULTRA FIXED —Å–∏—Å—Ç–µ–º–∞:** Callback –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ\n"
                 "üá∑üá∫ –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–Ω—è–ª –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å.\n"
                 "üá¨üáß Authorization process took longer than expected.\n\n"
                 "**–ß—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å / What to try:**\n"
                 "‚Ä¢ /auth - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ / try again\n"
                 "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —à–∞–≥–∏ / Make sure you completed all steps\n"
                 "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä popup / Check if browser blocks popups",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå Failed to send timeout message to user {user_id}: {e}")

async def send_authorization_success_ultra_fixed(user_id, context):
    """Send ULTRA FIXED authorization success message"""
    try:
        # Clean up monitoring
        if user_id in authorization_checks:
            del authorization_checks[user_id]
        
        # Get user info
        calendar_service = get_user_calendar_service(user_id)
        user_timezone = get_user_timezone(user_id, calendar_service)
        user_info = ultra_fixed_auth_manager.get_user_info(user_id) if ultra_fixed_auth_manager else None
        
        success_text = "üî• **ULTRA FIXED OAuth2 - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! / Authorization Successful!**\n\n"
        success_text += "‚úÖ **Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω! / Google Calendar connected!**\n\n"
        
        if user_info and user_info.get('primary_calendar'):
            cal = user_info['primary_calendar']
            success_text += f"üìÖ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å / Calendar:** {cal['summary']}\n"
            success_text += f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / Timezone:** {user_timezone}\n\n"
        
        success_text += f"ü§ñ **–ü–∞—Ä—Å–µ—Ä / Parser:** {parser_type}\n"
        success_text += f"üîß **OAuth2:** ULTRA FIXED - {AUTH_MODULE}\n\n"
        
        success_text += "üéâ **CALLBACK –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´! / CALLBACK ERRORS FIXED!**\n\n"
        
        success_text += "üß™ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã / Try these requests:**\n"
        success_text += "üá∑üá∫ ‚Ä¢ \"–≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00\"\n"
        success_text += "üá¨üáß ‚Ä¢ \"meeting tomorrow at 2pm\"\n"
        success_text += "üá∑üá∫ ‚Ä¢ \"—Ä–∞–±–æ—Ç–∞ —Å 9:00 –¥–æ 17:00, —É–∂–∏–Ω –≤ 19:00\"\n\n"
        
        success_text += "üöÄ **–í—Å–µ –≥–æ—Ç–æ–≤–æ! OAuth2 –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! / All set! OAuth2 fully fixed!**"
        
        await context.bot.send_message(
            chat_id=user_id,
            text=success_text,
            parse_mode='Markdown'
        )
        
        logger.info(f"‚úÖ ULTRA FIXED success message sent to user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error sending success message to user {user_id}: {e}")

async def send_authorization_error(user_id, context, error_message):
    """Send authorization error message"""
    try:
        if user_id in authorization_checks:
            del authorization_checks[user_id]
        
        error_text = f"""
‚ùå **–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / Authorization Error**

üî• **ULTRA FIXED —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –æ—à–∏–±–∫—É / ULTRA FIXED system detected error:**

**–û—à–∏–±–∫–∞ / Error:** {error_message}

**–ß—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å / What to try:**
‚Ä¢ /auth - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ / try again
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∞ / Make sure you granted all permissions
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä / Try a different browser
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É / Contact developer

üîß **OAuth2:** Ultra Fixed Version - —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
"""
        
        await context.bot.send_message(
            chat_id=user_id,
            text=error_text,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error sending error message to user {user_id}: {e}")

async def auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ULTRA FIXED /auth command"""
    user_id = update.effective_user.id
    
    if not await check_user_access(update):
        return
    
    if not ultra_fixed_auth_manager:
        await update.message.reply_text(
            "‚ùå **–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ / Authorization system unavailable**\n\n"
            "üá∑üá∫ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n"
            "üá¨üáß Contact developer.\n\n"
            "üîó **Contact:** @Iskakov_Damir"
        )
        return
    
    # Cancel any ongoing authorization monitoring
    if user_id in authorization_checks:
        del authorization_checks[user_id]
        logger.info(f"üõë Cancelled previous authorization monitoring for user {user_id}")
    
    # Revoke existing authorization if any
    if ultra_fixed_auth_manager.is_user_authorized(user_id):
        ultra_fixed_auth_manager.revoke_user_authorization(user_id)
        if user_id in user_timezones:
            del user_timezones[user_id]
        await update.message.reply_text(
            "üîÑ **–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é ULTRA FIXED... / Previous authorization revoked. Creating new ULTRA FIXED...**"
        )
    
    # Create new authorization
    try:
        auth_url = ultra_fixed_auth_manager.create_authorization_url(user_id)
        
        if auth_url:
            keyboard = [
                [InlineKeyboardButton("üî• ULTRA FIXED - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è / Authorize with Google", url=auth_url)],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å / Help", callback_data="auth_help")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            auth_text = """
üî• **ULTRA FIXED OAuth2 - Google Calendar Authorization**

üá∑üá∫ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê):**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "ULTRA FIXED - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è" –Ω–∏–∂–µ
2. –í–æ–π–¥–∏—Ç–µ –≤ Google –∞–∫–∫–∞—É–Ω—Ç
3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—Ö–∞ (—Ç–µ–ø–µ—Ä—å –ù–ï –ü–ê–î–ê–ï–¢!)
5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram

üá¨üáß **Instructions (FIXED SYSTEM):**
1. Click "ULTRA FIXED - Authorize" button below
2. Sign in to Google account
3. Allow calendar access
4. Wait for success page (now DOESN'T CRASH!)
5. Return to Telegram

üî• **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø / CRITICAL FIXES:**
‚úÖ Thread-safe callback processing
‚úÖ Proper state synchronization
‚úÖ Enhanced error handling
‚úÖ Extended port range (8080-8100)
‚úÖ Queue-based communication
"""
            
            await update.message.reply_text(auth_text, parse_mode='Markdown', reply_markup=reply_markup)
            
            # Start monitoring
            authorization_checks[user_id] = {
                'timestamp': datetime.now(),
                'context': context
            }
            
            asyncio.create_task(monitor_authorization_completion_ultra_fixed(user_id, context))
        else:
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ / Link creation error**\n\n"
                "üá∑üá∫ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n"
                "üá¨üáß Try later or contact developer."
            )
    except Exception as e:
        logger.error(f"‚ùå Auth command error: {e}")
        await update.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / Authorization system error**\n\n"
            f"üîß **–û—à–∏–±–∫–∞ / Error:** {str(e)}\n\n"
            "üá∑üá∫ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n"
            "üá¨üáß Contact developer."
        )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ULTRA FIXED status command"""
    user_id = update.effective_user.id
    
    if not await check_user_access(update):
        return
    
    user_timezone = DEFAULT_TIMEZONE
    auth_status = "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω / Not authorized"
    calendar_status = "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω / Not connected"
    
    if ultra_fixed_auth_manager and ultra_fixed_auth_manager.is_user_authorized(user_id):
        auth_status = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω / Authorized"
        calendar_service = get_user_calendar_service(user_id)
        user_timezone = get_user_timezone(user_id, calendar_service)
        calendar_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω / Connected" if calendar_service else "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ / Service error"
    
    monitoring_status = "‚úÖ –ì–æ—Ç–æ–≤ / Ready" if user_id not in authorization_checks else "üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / Monitoring authorization"
    
    status_text = f"""
üîç **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Vetra AI / Vetra AI System Status**

üî• **OAuth2 —Å–∏—Å—Ç–µ–º–∞ / OAuth2 System:** ULTRA FIXED! ({AUTH_MODULE})
ü§ñ **–ü–∞—Ä—Å–µ—Ä / Parser:** {parser_type}
üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / Authorization:** {auth_status}
üìÖ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å / Calendar:** {calendar_status}
üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / Timezone:** {user_timezone}
üì° **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ / Monitoring:** {monitoring_status}

üéØ **ULTRA FIXED –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ / ULTRA FIXED Features:**
‚Ä¢ **OAuth2 Callback:** üî• –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù / COMPLETELY FIXED
‚Ä¢ **Thread Safety:** ‚úÖ Queue + Lock —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è / Queue + Lock sync
‚Ä¢ **–ü–æ—Ä—Ç—ã / Ports:** ‚úÖ –ê–≤—Ç–æ-–ø–æ–∏—Å–∫ 8080-8100 / Auto-find 8080-8100
‚Ä¢ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ / Error Handling:** ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è / Enhanced
‚Ä¢ **–°–æ—Å—Ç–æ—è–Ω–∏–µ / State:** ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è / Proper sync

üöÄ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ! OAuth2 callback –æ—à–∏–±–∫–∏ –†–ï–®–ï–ù–´! / System operating optimally! OAuth2 callback errors SOLVED!**
"""
    
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ULTRA FIXED help command"""
    user_id = update.effective_user.id
    
    if not await check_user_access(update):
        return
    
    auth_status = "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è / Required"
    if ultra_fixed_auth_manager and ultra_fixed_auth_manager.is_user_authorized(user_id):
        auth_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ / Active"
    
    help_text = f"""
üÜò **–°–ø—Ä–∞–≤–∫–∞ Vetra AI / Vetra AI Help**

üî• **OAuth2:** ULTRA FIXED! Callback –æ—à–∏–±–∫–∏ —Ä–µ—à–µ–Ω—ã! / Callback errors solved!

üîß **–°—Ç–∞—Ç—É—Å / Status:**
ü§ñ **–ü–∞—Ä—Å–µ—Ä / Parser:** {parser_type}
üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / Authorization:** {auth_status}
üîß **Auth Module:** {AUTH_MODULE}

üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å / How to use:**

üá∑üá∫ **–ü—Ä–æ—Å—Ç—ã–µ —Å–æ–±—ã—Ç–∏—è:**
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
‚Ä¢ "–æ–±–µ–¥ –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 13:30"
‚Ä¢ "–∑–≤–æ–Ω–æ–∫ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00"

üá¨üáß **Simple events:**
‚Ä¢ "meeting tomorrow at 2pm"
‚Ä¢ "lunch Friday at 1:30pm"
‚Ä¢ "call Monday at 10am"

üá∑üá∫ **–ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π:**
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞ –≤ 10:00, –æ–±–µ–¥ –≤ 13:00"
‚Ä¢ "—Ä–∞–±–æ—Ç–∞ —Å 9:00 –¥–æ 17:00, —É–∂–∏–Ω –≤ 19:00"

üá¨üáß **Multiple events:**
‚Ä¢ "meeting at 10am, lunch at 1pm"
‚Ä¢ "work from 9am to 5pm, dinner at 7pm"

üá∑üá∫ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:**
‚Ä¢ "–≤—Å—Ç—Ä–µ—á–∞ —Å 12:00 –¥–æ 14:00"
‚Ä¢ "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤ 17:00 –Ω–∞ 2 —á–∞—Å–∞"

üá¨üáß **Time ranges:**
‚Ä¢ "meeting from 12pm to 2pm"
‚Ä¢ "presentation at 5pm for 2 hours"

üîß **–ö–æ–º–∞–Ω–¥—ã / Commands:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å / Start
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞ / This help
‚Ä¢ `/auth` - ULTRA FIXED –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / ULTRA FIXED authorization
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å / Status
‚Ä¢ `/timezone` - –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / Timezone

üî• **OAuth2 ULTRA FIXED –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! / OAuth2 ULTRA FIXED and ready to work!**
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def timezone_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Timezone information command"""
    user_id = update.effective_user.id
    
    if not await check_user_access(update):
        return
    
    if not ultra_fixed_auth_manager or not ultra_fixed_auth_manager.is_user_authorized(user_id):
        await update.message.reply_text(
            "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / Authorization required**\n\n"
            "üî• **ULTRA FIXED OAuth2 –¥–æ—Å—Ç—É–ø–µ–Ω!** / **ULTRA FIXED OAuth2 available!**\n\n"
            "üá∑üá∫ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /auth\n"
            "üá¨üáß Use command: /auth",
            parse_mode='Markdown'
        )
        return
    
    try:
        calendar_service = get_user_calendar_service(user_id)
        user_timezone = get_user_timezone(user_id, calendar_service)
        tz_info = get_timezone_info(user_timezone)
        
        timezone_text = f"""
üåç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ / Timezone Information**

üìç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / Timezone:** {user_timezone}
üïê **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è / Current time:** {tz_info['current_time']}
üìÖ **–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ / Current date:** {tz_info['current_date']}
üåê **–°–º–µ—â–µ–Ω–∏–µ UTC / UTC offset:** {tz_info['utc_offset']}
‚òÄÔ∏è **–õ–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è / Daylight saving:** {'–î–∞/Yes' if tz_info['dst_active'] else '–ù–µ—Ç/No'}

**‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ / Source:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–∑ Google Calendar / Auto-detected from Google Calendar

üî• **OAuth2:** ULTRA FIXED - —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ! / ULTRA FIXED - works flawlessly!
"""
        
        await update.message.reply_text(timezone_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error getting timezone information: {e}")
        await update.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ / Error getting timezone information**\n\n"
            "üá∑üá∫ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: /auth\n"
            "üá¨üáß Try re-authorization: /auth\n\n"
            "üî• **OAuth2 ULTRA FIXED –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! / OAuth2 ULTRA FIXED ready to help!**",
            parse_mode='Markdown'
        )

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ULTRA FIXED callback handler"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "auth_help":
        help_text = """
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / Authorization Help**

üî• **ULTRA FIXED OAuth2 - –í—Å–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã! / All errors fixed!**

üá∑üá∫ **–®–∞–≥–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê):**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "ULTRA FIXED - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ Google –∞–∫–∫–∞—É–Ω—Ç
3Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
4Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—Ö–∞ (–ù–ï –ü–ê–î–ê–ï–¢!)
5Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram

üá¨üáß **Steps (FIXED SYSTEM):**
1Ô∏è‚É£ Click "ULTRA FIXED - Authorize"
2Ô∏è‚É£ Sign in to Google account
3Ô∏è‚É£ Allow calendar access
4Ô∏è‚É£ Wait for success page (DOESN'T CRASH!)
5Ô∏è‚É£ Return to Telegram

üî• **–ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û / WHAT'S FIXED:**
‚úÖ Thread-safe callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ / Thread-safe callback handling
‚úÖ Queue-based —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è / Queue-based synchronization
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ / Extended port range
‚úÖ Proper exception handling
‚úÖ State management –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏ / State management between threads

‚ö†Ô∏è **–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫ / Troubleshooting:**
‚Ä¢ /auth –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç / if it doesn't work
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä / Try different browser
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É / Contact developer

üéâ **–≠—Ç–∞ –≤–µ—Ä—Å–∏—è –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ò–õ–ê –ø—Ä–æ–±–ª–µ–º—ã callback! / This version COMPLETELY SOLVED callback issues!**
"""
        await query.edit_message_text(help_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ULTRA FIXED message handler"""
    user_text = update.message.text
    user_id = update.effective_user.id
    
    if not await check_user_access(update):
        return
    
    if not ultra_fixed_auth_manager or not ultra_fixed_auth_manager.is_user_authorized(user_id):
        await update.message.reply_text(
            "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / Authorization required**\n\n"
            "üî• **ULTRA FIXED OAuth2 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! / ULTRA FIXED OAuth2 ready to work!**\n\n"
            "üá∑üá∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å Google Calendar —Å–Ω–∞—á–∞–ª–∞.\n"
            "üá¨üáß Please authorize with Google Calendar first.\n\n"
            "–ö–æ–º–∞–Ω–¥–∞ / Command: /auth\n\n"
            "‚úÖ **Callback –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã! / Callback errors fixed!**",
            parse_mode='Markdown'
        )
        return
    
    logger.info(f"üì® Processing message from user {user_id}: '{user_text}'")
    
    if not parser:
        await update.message.reply_text(
            "‚ùå **–ü–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω / Parser unavailable**\n\n"
            "üá∑üá∫ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "üá¨üáß Contact administrator.",
            parse_mode='Markdown'
        )
        return
    
    # Get user services
    calendar_service = get_user_calendar_service(user_id)
    if not calendar_service:
        await update.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è / Calendar service error**\n\n"
            "üá∑üá∫ –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–µ–∫–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: /auth\n"
            "üá¨üáß Authorization may have expired. Try: /auth\n\n"
            "üî• **ULTRA FIXED OAuth2 –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! / ULTRA FIXED OAuth2 ready to help!**",
            parse_mode='Markdown'
        )
        return
    
    user_timezone = get_user_timezone(user_id, calendar_service)
    
    processing_msg = await update.message.reply_text(
        f"üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å {parser_type}... / Processing with {parser_type}...\n"
        f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / Timezone: {user_timezone}\n"
        f"üî• OAuth2: ULTRA FIXED ({AUTH_MODULE})"
    )
    
    try:
        # Extract events using the parser
        events = parser.extract_multiple_events(user_text, user_timezone)
        
        if not events:
            await processing_msg.edit_text(
                f"‚ùå **{parser_type} –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å —Å–æ–±—ã—Ç–∏—è / could not extract events**\n\n"
                f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / Timezone:** {user_timezone}\n"
                f"üî• **OAuth2:** ULTRA FIXED - –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / not an authorization issue\n\n"
                f"üß™ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—ã / Try these formats:**\n"
                f"üá∑üá∫ ‚Ä¢ '–≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00'\n"
                f"üá¨üáß ‚Ä¢ 'meeting tomorrow at 2pm'\n"
                f"üá∑üá∫ ‚Ä¢ '–æ–±–µ–¥ –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 13:30'\n"
                f"üá¨üáß ‚Ä¢ 'lunch Friday at 1:30pm'"
            )
            return
        
        event_count = len(events)
        await processing_msg.edit_text(
            f"‚úÖ {parser_type} –Ω–∞—à—ë–ª {event_count} —Å–æ–±—ã—Ç–∏–π! / found {event_count} event(s)!\n"
            f"üìÖ –°–æ–∑–¥–∞—é –≤ Google Calendar... / Creating in Google Calendar...\n"
            f"üî• OAuth2: ULTRA FIXED - —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ / working flawlessly"
        )
        
        # Create events
        created_events = []
        failed_events = []

        for i, event_data in enumerate(events, 1):
            if len(event_data) == 4:
                start_datetime, summary, event_type, end_datetime = event_data
            else:
                start_datetime, summary, event_type = event_data
                end_datetime = get_smart_end_time(start_datetime, summary)

            try:
                start_datetime = validate_datetime(start_datetime, user_timezone)
                if not start_datetime:
                    failed_events.append(summary + " (–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ / invalid date)")
                    continue
                
                event_result = add_event_to_user_calendar(
                    calendar_service,
                    summary,
                    start_datetime,
                    end_datetime,
                    user_timezone
                )
                
                if event_result:
                    created_events.append({
                        'summary': summary,
                        'start': start_datetime,
                        'end': end_datetime,
                        'type': event_type,
                        'html_link': event_result.get('htmlLink', ''),
                        'timezone': user_timezone
                    })
                    logger.info(f"‚úÖ Event {i} '{summary}' created successfully")
                else:
                    failed_events.append(summary)
                    
            except Exception as e:
                logger.error(f"‚ùå Error creating event '{summary}': {e}")
                failed_events.append(summary)
        
        # Send results
        if created_events and not failed_events:
            if len(created_events) == 1:
                event = created_events[0]
                
                success_text = f"""
üéâ **–£–°–ü–ï–• —Å ULTRA FIXED OAuth2! / SUCCESS with ULTRA FIXED OAuth2!**

üî• **OAuth2:** ULTRA FIXED - callback –æ—à–∏–±–∫–∏ —Ä–µ—à–µ–Ω—ã! / callback errors solved!
ü§ñ **–ü–∞—Ä—Å–µ—Ä / Parser:** {parser_type}
üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / Timezone:** {event['timezone']}

üìã **–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ / Event created:**
‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ / Title:** {event['summary']}
‚Ä¢ **–î–∞—Ç–∞ / Date:** {format_datetime_for_display(event['start'])}
‚Ä¢ **–í—Ä–µ–º—è / Time:** {event['start'].strftime('%H:%M')} - {event['end'].strftime('%H:%M')}

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Google Calendar / Open in Google Calendar]({event['html_link']})

üöÄ **OAuth2 —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ! –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –æ—à–∏–±–æ–∫! / OAuth2 works perfectly! No more errors!**
"""
            else:
                success_text = f"üéâ **–í–°–ï {len(created_events)} —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω—ã! / ALL {len(created_events)} events created!**\n\n"
                success_text += f"üî• **OAuth2:** ULTRA FIXED - —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ! / working flawlessly!\n"
                success_text += f"ü§ñ **–ü–∞—Ä—Å–µ—Ä / Parser:** {parser_type}\n"
                success_text += f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / Timezone:** {user_timezone}\n\n"
                
                for i, event in enumerate(created_events, 1):
                    duration = int((event['end'] - event['start']).total_seconds() / 60)
                    duration_display = f" ({duration}–º–∏–Ω/{duration}min)" if duration < 60 else f" ({duration//60}—á/{duration//60}h)"
                    
                    success_text += f"""**{i}. {event['summary']}**
üìÖ {format_datetime_for_display(event['start'])}{duration_display}

"""
                
                success_text += f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Google Calendar / Open in Google Calendar]({created_events[0]['html_link']})"
                success_text += f"\n\nüöÄ **ULTRA FIXED OAuth2 —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! / ULTRA FIXED OAuth2 works excellently!**"
            
            await processing_msg.edit_text(success_text, parse_mode='Markdown')
            
        else:
            # Partial or no success
            partial_text = f"‚ö†Ô∏è **–°–º–µ—à–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã / Mixed results:**\n\n"
            partial_text += f"‚úÖ –°–æ–∑–¥–∞–Ω–æ / Created: {len(created_events)} —Å–æ–±—ã—Ç–∏–π / events\n"
            partial_text += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å / Failed: {len(failed_events)} —Å–æ–±—ã—Ç–∏–π / events\n\n"
            
            if created_events:
                partial_text += "**‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è / Created events:**\n"
                for event in created_events:
                    partial_text += f"‚Ä¢ {event['summary']}\n"
            
            if failed_events:
                partial_text += "\n**‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è / Failed events:**\n"
                for failed in failed_events:
                    partial_text += f"‚Ä¢ {failed}\n"
            
            partial_text += f"\nüî• **OAuth2:** ULTRA FIXED - –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / not an authorization issue"
            
            await processing_msg.edit_text(partial_text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå Error processing message: {e}")
        await processing_msg.edit_text(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ / Processing error**\n\n"
            f"ü§ñ **–ü–∞—Ä—Å–µ—Ä / Parser:** {parser_type}\n"
            f"üî• **OAuth2:** ULTRA FIXED - –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / not an authorization issue\n"
            f"üîß **–û—à–∏–±–∫–∞ / Error:** {str(e)}\n\n"
            f"üá∑üá∫ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n"
            f"üá¨üáß Try again or contact developer."
        )

def add_event_to_user_calendar(service, summary, start_datetime, end_datetime, timezone='Asia/Almaty'):
    """Add event to user's calendar with ULTRA FIXED OAuth2"""
    try:
        event = {
            'summary': summary,
            'start': {
                'dateTime': start_datetime.isoformat(),
                'timeZone': timezone,
            },
            'end': {
                'dateTime': end_datetime.isoformat(),
                'timeZone': timezone,
            },
            'description': f'‚ú® –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Vetra AI ({parser_type}) / Created via Vetra AI ({parser_type})\nüî• OAuth2: ULTRA FIXED - callback –æ—à–∏–±–∫–∏ —Ä–µ—à–µ–Ω—ã! / callback errors solved!\nüåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / Timezone: {timezone}'
        }
        
        logger.info(f"üìÖ Creating event: {summary}")
        
        event_result = service.events().insert(calendarId='primary', body=event).execute()
        logger.info(f"‚úÖ Event created! ID: {event_result.get('id')}")
        return event_result
        
    except Exception as e:
        logger.error(f"‚ùå Event creation error: {e}")
        return None

def get_smart_end_time(start_time, summary, default_duration_hours=1):
    """Smart end time determination based on event type"""
    summary_lower = summary.lower()
    
    # Short events (30 minutes)
    short_events = ['–∑–≤–æ–Ω–æ–∫', '—Å–æ–∑–≤–æ–Ω', '–æ–±–µ–¥', '–∫–æ—Ñ–µ', '–ø–µ—Ä–µ—Ä—ã–≤', 'call', 'lunch', 'coffee', 'break']
    if any(word in summary_lower for word in short_events):
        return start_time + timedelta(minutes=30)
    
    # Long events (2 hours)
    long_events = ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '—Å–µ–º–∏–Ω–∞—Ä', '–ª–µ–∫—Ü–∏—è', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', 'presentation', 'seminar', 'lecture', 'workout', 'conference']
    if any(word in summary_lower for word in long_events):
        return start_time + timedelta(hours=2)
    
    # Very long events (3 hours)
    very_long_events = ['—ç–∫–∑–∞–º–µ–Ω', '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', '–∏–Ω—Ç–µ—Ä–≤—å—é', 'exam', 'interview', 'workshop']
    if any(word in summary_lower for word in very_long_events):
        return start_time + timedelta(hours=3)
    
    # Default (1 hour)
    return start_time + timedelta(hours=default_duration_hours)

async def add_beta_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add beta user (admin only)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USERS:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. / You don't have permissions for this command."
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç / Invalid format**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ / Use: `/add_beta USER_ID`",
            parse_mode='Markdown'
        )
        return
    
    try:
        new_user_id = int(context.args[0])
        BETA_USERS.add(new_user_id)
        
        await update.message.reply_text(
            f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä—ã! / User {new_user_id} added to beta testers!**\n\n"
            f"üî• –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ULTRA FIXED OAuth2 —Å {parser_type}. / "
            f"Now they can use ULTRA FIXED OAuth2 with {parser_type}.",
            parse_mode='Markdown'
        )
        
        logger.info(f"‚úÖ Admin {user_id} added user {new_user_id} to beta testers")
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID. / Invalid User ID format."
        )

def main():
    """Launch bot with ULTRA FIXED OAuth2 system"""
    logger.info("üî• Starting Vetra AI with ULTRA FIXED OAuth2 system...")
    logger.info(f"ü§ñ Active Parser: {parser_type}")
    logger.info(f"üîß Auth Module: {AUTH_MODULE}")
    logger.info(f"üåç Timezone support: ENABLED")
    
    if not parser:
        logger.error("‚ùå No parser available!")
        print("‚ùå No event parser available")
        print("Check parser files and dependencies")
        return
    
    if not ultra_fixed_auth_manager:
        logger.error("‚ùå No authentication manager available!")
        print("‚ùå No authentication system available")
        print("Check authentication module")
        return
    
    print(f"""
üî• VETRA AI - ULTRA FIXED OAUTH2 –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!
   VETRA AI - ULTRA FIXED OAUTH2 SYSTEM READY!

üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ / SYSTEM STATUS:
ü§ñ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä / Active Parser: {parser_type}
üî• OAuth2 —Å—Ç–∞—Ç—É—Å / OAuth2 Status: ULTRA FIXED! Callback –æ—à–∏–±–∫–∏ –†–ï–®–ï–ù–´!
üîê –ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / Auth Module: {AUTH_MODULE}
üåç –ú—É–ª—å—Ç–∏-—á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ / Multi-timezone: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ / Enabled
üì± –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram / Telegram Integration: ‚úÖ –ì–æ—Ç–æ–≤–∞ / Ready

üöÄ ULTRA FIXED –£–õ–£–ß–®–ï–ù–ò–Ø / ULTRA FIXED IMPROVEMENTS:
‚úÖ Thread-safe callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ / Thread-safe callback handling
‚úÖ Queue-based —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è / Queue-based synchronization  
‚úÖ Proper state management –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏ / between threads
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ (8080-8100) / Extended port range
‚úÖ Enhanced exception handling
‚úÖ –ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ "Authorization completion error"
‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ / Enhanced diagnostics

üéØ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£! CALLBACK –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!
   READY FOR PRODUCTION! CALLBACK ERRORS FIXED!
""")
    
    # Create application
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # Add handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("auth", auth_command))
    app.add_handler(CommandHandler("timezone", timezone_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("add_beta", add_beta_user_command))
    app.add_handler(CallbackQueryHandler(callback_query_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("üî• VETRA AI BOT –ì–û–¢–û–í –° ULTRA FIXED OAUTH2!")
    logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ callback —Ä–µ—à–µ–Ω—ã")
    logger.info("üöÄ –ì–æ—Ç–æ–≤ –∫ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ")
    
    # Start polling
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()